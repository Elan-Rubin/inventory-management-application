/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Package;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Set;

/**
 *
 * @author eland
 */
public class ShowItems extends javax.swing.JFrame {
    public ItemManager manager;
    boolean none=true,red=true,orange=true,yellow=true,green=true;
    boolean sold=true,here=true,coming=true;
    
    ArrayList<String[]> list = new ArrayList<String[]>();
    int amountOfItems;

    /**
     * Creates new form ShowItems
     */
    public ShowItems() {
        initComponents();
        setLocation(366,0);
        refreshTable();
    }
    
    public void refreshTable(){
        amountOfItems=0;
        list.clear();
        
        System.out.println("Cleared list:"+list);
        
        manager = new ItemManager();
        
        MainGUI.setManager(manager);
        AddItem.setManager(manager);
        EditItem.setManager(manager);
        AddItem.setShowItems(this);
        EditItem.setShowItems(this);
        
        
        manager.items.clear();
        manager.start();
        
        for(Item item : manager.items){
            boolean show = true;
            if(item.getName().equals("SKIP")){
                show=false;
            }
            
            switch(item.getStatus()){
                case Coming:
                    if(!coming){show=false;}
                    break;
                case Here:
                    if(!here){show=false;}
                    break;
                case Sold:
                    if(!sold){show=false;}
                    break;
            }
            
            if(show){
                switch(item.getFlag()){
                case None:
                    if(!none){show=false;}
                    break;
                case Red:
                    if(!red){show=false;}
                    break;
                case Orange:
                    if(!orange){show=false;}
                    break;
                case Yellow:
                    if(!yellow){show=false;}
                    break;
                case Green:
                    if(!green){show=false;}
                    break;
                }
            }
            
            String[] tempArray = {
                item.getName().toString(),
                String.valueOf(item.getPrice()),
                item.getTitle(),
                item.getDescription(),
                String.valueOf(item.getAmount()),
                item.getStatus().toString(),
                item.getFlag().toString()
            };
            if(show){
                amountOfItems++;
                list.add(tempArray);
                System.out.println(item.turnIntoString());
            }
            
            
        }
        System.out.println("-----"+list);
        makeTable(list,amountOfItems);
        System.out.println(
                "\nRed: "+red+
                " Orange: "+orange+
                " Yellow: "+yellow+
                " Green: "+green+"\n"+
                "Sold: "+sold+
                " Coming: "+coming+
                " Here: "+here+"\n");
    }
    
    //THIS DOESN'T WORK YET!!!
    void makeTable(ArrayList<String[]>itemsList,int amount){
        //ItemTable.removeAll();
        String[][] array = new String[amount][7];
        for(int i=0;i<amount;i++){
            array[i] = itemsList.get(i);
        }
        
        ItemTable.setModel(new javax.swing.table.DefaultTableModel(
                array,
                new String[]{
                    "Name", "Price", "Title", "Description", "Amount", "Status", "Flag"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ItemTable = new javax.swing.JTable();
        Here = new javax.swing.JCheckBox();
        Coming = new javax.swing.JCheckBox();
        Red = new javax.swing.JCheckBox();
        Sold = new javax.swing.JCheckBox();
        None = new javax.swing.JCheckBox();
        Orange = new javax.swing.JCheckBox();
        RefreshButton = new javax.swing.JButton();
        Yellow = new javax.swing.JCheckBox();
        Green = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        DeselectAllButton = new javax.swing.JButton();
        SelectAllButton = new javax.swing.JButton();
        EditItemButton = new javax.swing.JButton();
        DeleteItemButton = new javax.swing.JButton();
        CopyDButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        ItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Price", "Title", "Description", "Amount", "Status", "Flag"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ItemTable.setShowGrid(false);
        jScrollPane1.setViewportView(ItemTable);

        Here.setSelected(true);
        Here.setText("Here");
        Here.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HereActionPerformed(evt);
            }
        });

        Coming.setSelected(true);
        Coming.setText("Coming");
        Coming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComingActionPerformed(evt);
            }
        });

        Red.setSelected(true);
        Red.setText("Red");
        Red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedActionPerformed(evt);
            }
        });

        Sold.setSelected(true);
        Sold.setText("Sold");
        Sold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SoldActionPerformed(evt);
            }
        });

        None.setSelected(true);
        None.setText("No flag");
        None.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoneActionPerformed(evt);
            }
        });

        Orange.setSelected(true);
        Orange.setText("Orange");
        Orange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrangeActionPerformed(evt);
            }
        });

        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        Yellow.setSelected(true);
        Yellow.setText("Yellow");
        Yellow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YellowActionPerformed(evt);
            }
        });

        Green.setSelected(true);
        Green.setText("Green");
        Green.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreenActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 0));
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("Don't close this window!");

        DeselectAllButton.setText("Deselect all");
        DeselectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeselectAllButtonActionPerformed(evt);
            }
        });

        SelectAllButton.setText("Select all");
        SelectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectAllButtonActionPerformed(evt);
            }
        });

        EditItemButton.setText("Edit selected item");
        EditItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditItemButtonActionPerformed(evt);
            }
        });

        DeleteItemButton.setText("Delete selected item");
        DeleteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteItemButtonActionPerformed(evt);
            }
        });

        CopyDButton.setText("Copy selected item's description");
        CopyDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyDButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Here, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Sold, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Coming, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(None, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Red, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Yellow, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Orange, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Green, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SelectAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DeselectAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(EditItemButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DeleteItemButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CopyDButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Here)
                    .addComponent(Sold)
                    .addComponent(Red)
                    .addComponent(Yellow)
                    .addComponent(jLabel1))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Coming)
                    .addComponent(None)
                    .addComponent(Orange)
                    .addComponent(RefreshButton)
                    .addComponent(Green)
                    .addComponent(DeselectAllButton)
                    .addComponent(SelectAllButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditItemButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteItemButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CopyDButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HereActionPerformed
        // TODO add your handling code here:
        here=Here.isSelected();
    }//GEN-LAST:event_HereActionPerformed

    private void SoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SoldActionPerformed
        // TODO add your handling code here:
        sold=Sold.isSelected();
    }//GEN-LAST:event_SoldActionPerformed

    private void ComingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComingActionPerformed
        // TODO add your handling code here:
        coming=Coming.isSelected();
    }//GEN-LAST:event_ComingActionPerformed

    private void NoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoneActionPerformed
        // TODO add your handling code here:
        none=None.isSelected();
    }//GEN-LAST:event_NoneActionPerformed

    private void RedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedActionPerformed
        // TODO add your handling code here:
        red=Red.isSelected();
    }//GEN-LAST:event_RedActionPerformed

    private void OrangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrangeActionPerformed
        // TODO add your handling code here:
        orange=Orange.isSelected();
    }//GEN-LAST:event_OrangeActionPerformed

    private void YellowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YellowActionPerformed
        // TODO add your handling code here:
        yellow=Yellow.isSelected();
    }//GEN-LAST:event_YellowActionPerformed

    private void GreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GreenActionPerformed
        // TODO add your handling code here:
        green=Green.isSelected();
    }//GEN-LAST:event_GreenActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        // TODO add your handling code here:
        refreshTable();
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void SelectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectAllButtonActionPerformed
        // TODO add your handling code here:
        none = true; red = true; orange = true; yellow = true; green = true;
        sold = true; here = true; coming = true;
        Here.setSelected(true); Sold.setSelected(true); Coming.setSelected(true);
        None.setSelected(true); Red.setSelected(true); Orange.setSelected(true); Yellow.setSelected(true); Green.setSelected(true);
    }//GEN-LAST:event_SelectAllButtonActionPerformed

    private void DeselectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeselectAllButtonActionPerformed
        // TODO add your handling code here:
        none = false; red = false; orange = false; yellow = false; green = false;
        sold = false; here = false; coming = false;
        Here.setSelected(false); Sold.setSelected(false); Coming.setSelected(false);
        None.setSelected(false); Red.setSelected(false); Orange.setSelected(false); Yellow.setSelected(false); Green.setSelected(false);
    }//GEN-LAST:event_DeselectAllButtonActionPerformed

    private void EditItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditItemButtonActionPerformed
        // TODO add your handling code here:
        if(ItemTable.getSelectedRow()>=0){
            EditItem editItem = new EditItem();
            editItem.show();
            String itemName = (ItemTable.getValueAt(ItemTable.getSelectedRow(), 0)).toString();
            editItem.setIndexToModifty(ItemManager.getItem(itemName));
            System.out.println("Row number "+ItemTable.getSelectedRow()+" is selected.");
        }
    }//GEN-LAST:event_EditItemButtonActionPerformed

    private void DeleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteItemButtonActionPerformed
        // TODO add your handling code here:
        if(ItemTable.getSelectedRow()>=0){
            System.out.println(ItemTable.getSelectedRow());
            String itemName = (ItemTable.getValueAt(ItemTable.getSelectedRow(), 0)).toString();
            manager.removeItem(ItemManager.getItem(itemName));
            try {
                ItemManager.writeData(manager.dataToWrite());
            } 
            catch (IOException e) {
                System.out.println("Oh darn! Not another IO Exception!");
            }    
            refreshTable();
        }
    }//GEN-LAST:event_DeleteItemButtonActionPerformed

    private void CopyDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyDButtonActionPerformed
        // TODO add your handling code here:
        String itemName = (ItemTable.getValueAt(ItemTable.getSelectedRow(), 0)).toString();
        String copyTo = manager.getItemAt(ItemManager.getItem(itemName)).getDescription();
        StringSelection stringSelection = new StringSelection(copyTo);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_CopyDButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShowItems().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Coming;
    private javax.swing.JButton CopyDButton;
    private javax.swing.JButton DeleteItemButton;
    private javax.swing.JButton DeselectAllButton;
    private javax.swing.JButton EditItemButton;
    private javax.swing.JCheckBox Green;
    private javax.swing.JCheckBox Here;
    private javax.swing.JTable ItemTable;
    private javax.swing.JCheckBox None;
    private javax.swing.JCheckBox Orange;
    private javax.swing.JCheckBox Red;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SelectAllButton;
    private javax.swing.JCheckBox Sold;
    private javax.swing.JCheckBox Yellow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
